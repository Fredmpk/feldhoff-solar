/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Projects = {
  _id: string;
  _type: "projects";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  projectsTitle?: string;
  projectsMainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  altProjectsMainImage?: string;
  imageGallery?: Array<{
    galleryImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    altGalleryImage?: string;
    _key: string;
  }>;
  projectsText?: string;
};

export type Legal = {
  _id: string;
  _type: "legal";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  street?: string;
  city?: string;
  tel?: string;
  mail?: string;
  privacy?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Enterprise = {
  _id: string;
  _type: "enterprise";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  enterpriseTitle?: string;
  enterpriseImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  enterpriseAltImage?: string;
  enterpriseText?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type B2b = {
  _id: string;
  _type: "b2b";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  b2bTitle?: string;
  b2bImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  b2bAltImage?: string;
  b2bText?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type AdvantagesFS = {
  _id: string;
  _type: "advantagesFS";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  advantagesTitle?: string;
  subTitle?: string;
  titleS1?: string;
  textS1?: string;
  textsizeS1?: "small" | "normal" | "large";
  iconS1?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  titleS2?: string;
  textS2?: string;
  textsizeS2?: "small" | "normal" | "large";
  iconS2?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  titleS3?: string;
  textS3?: string;
  textsizeS3?: "small" | "normal" | "large";
  iconS3?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  titleS4?: string;
  textS4?: string;
  textsizeS4?: "small" | "normal" | "large";
  iconS4?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type About = {
  _id: string;
  _type: "about";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  aboutTitle?: string;
  aboutImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  altAboutImage?: string;
  enterpriseText?: string;
  founderImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  altFounderImage?: string;
  founderText?: string;
};

export type PrivateHomes = {
  _id: string;
  _type: "privateHomes";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  privateTitle?: string;
  privateImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  privateAltImage?: string;
  privateTextLeft?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  privateTextRight?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Hero = {
  _id: string;
  _type: "hero";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heroTitle?: string;
  heroImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  heroAltImage?: string;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Projects | Legal | Enterprise | B2b | AdvantagesFS | About | PrivateHomes | Hero | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../feldhoff-solar-next/src/sanity/queries.ts
// Variable: HERO_QUERY
// Query: *[_type == "hero"][0]{    _id,    heroTitle,    heroImage{    asset->{url}  },  }
export type HERO_QUERYResult = {
  _id: string;
  heroTitle: string | null;
  heroImage: {
    asset: {
      url: string | null;
    } | null;
  } | null;
} | null;
// Variable: PRIVATE_HOMES_QUERY
// Query: *[_type == "privateHomes"][0]{    _id,    privateTitle,    privateImage{    asset->{url}    },    privateAltImage,    privateTextLeft,    privateTextRight    }
export type PRIVATE_HOMES_QUERYResult = {
  _id: string;
  privateTitle: string | null;
  privateImage: {
    asset: {
      url: string | null;
    } | null;
  } | null;
  privateAltImage: string | null;
  privateTextLeft: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  privateTextRight: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
} | null;
// Variable: ENTERPRISE_QUERY
// Query: *[_type == "enterprise"][0]{    _id,    enterpriseTitle,    enterpriseImage{    asset->{url}    },    enterpriseAltImage,    enterpriseText    }
export type ENTERPRISE_QUERYResult = {
  _id: string;
  enterpriseTitle: string | null;
  enterpriseImage: {
    asset: {
      url: string | null;
    } | null;
  } | null;
  enterpriseAltImage: string | null;
  enterpriseText: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
} | null;
// Variable: B2B_QUERY
// Query: *[_type == "b2b"][0]{    _id,    b2bTitle,    b2bImage{    asset->{url}    },    b2bAltImage,    b2bText    }
export type B2B_QUERYResult = {
  _id: string;
  b2bTitle: string | null;
  b2bImage: {
    asset: {
      url: string | null;
    } | null;
  } | null;
  b2bAltImage: string | null;
  b2bText: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
} | null;
// Variable: ABOUT_QUERY
// Query: *[_type == "about"][0]{    _id,    aboutTitle,    aboutImage{    asset->{url}    },    altAboutImage,    enterpriseText,    founderImage{    asset->{url}    },    altFounderImage,    founderText    }
export type ABOUT_QUERYResult = {
  _id: string;
  aboutTitle: string | null;
  aboutImage: {
    asset: {
      url: string | null;
    } | null;
  } | null;
  altAboutImage: string | null;
  enterpriseText: string | null;
  founderImage: {
    asset: {
      url: string | null;
    } | null;
  } | null;
  altFounderImage: string | null;
  founderText: string | null;
} | null;
// Variable: ADVANTAGES_FS_QUERY
// Query: *[_type == "advantagesFS"][0]{    _id,    advantagesTitle,    subTitle,    titleS1,    textS1,    iconS1{    asset->{url}    },    titleS2,    textS2,    iconS2{    asset->{url}    },    titleS3,    textS3,    iconS3{    asset->{url}    },    titleS4,    textS4,    iconS4{    asset->{url}    },    }
export type ADVANTAGES_FS_QUERYResult = {
  _id: string;
  advantagesTitle: string | null;
  subTitle: string | null;
  titleS1: string | null;
  textS1: string | null;
  iconS1: {
    asset: {
      url: string | null;
    } | null;
  } | null;
  titleS2: string | null;
  textS2: string | null;
  iconS2: {
    asset: {
      url: string | null;
    } | null;
  } | null;
  titleS3: string | null;
  textS3: string | null;
  iconS3: {
    asset: {
      url: string | null;
    } | null;
  } | null;
  titleS4: string | null;
  textS4: string | null;
  iconS4: {
    asset: {
      url: string | null;
    } | null;
  } | null;
} | null;
// Variable: PROJECTS_QUERY
// Query: *[_type == "projects"][]{    _id,    projectsTitle,    projectsMainImage{    asset->{url}    },    altProjectsMainImage,imageGallery[] {galleryImage{    asset->{url}    },    altGalleryImage,    },    projectsText    }
export type PROJECTS_QUERYResult = Array<{
  _id: string;
  projectsTitle: string | null;
  projectsMainImage: {
    asset: {
      url: string | null;
    } | null;
  } | null;
  altProjectsMainImage: string | null;
  imageGallery: Array<{
    galleryImage: {
      asset: {
        url: string | null;
      } | null;
    } | null;
    altGalleryImage: string | null;
  }> | null;
  projectsText: string | null;
}>;
// Variable: LEGAL_QUERY
// Query: *[_type == "legal"][0]{    _id,    name,    street,    city,    tel,    mail,    privacy    }
export type LEGAL_QUERYResult = {
  _id: string;
  name: string | null;
  street: string | null;
  city: string | null;
  tel: string | null;
  mail: string | null;
  privacy: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"hero\"][0]{\n    _id,\n    heroTitle,\n    heroImage{\n    asset->{url}\n  },\n  }": HERO_QUERYResult;
    "*[_type == \"privateHomes\"][0]{\n    _id,\n    privateTitle,\n    privateImage{\n    asset->{url}\n    },\n    privateAltImage,\n    privateTextLeft,\n    privateTextRight\n    }": PRIVATE_HOMES_QUERYResult;
    "*[_type == \"enterprise\"][0]{\n    _id,\n    enterpriseTitle,\n    enterpriseImage{\n    asset->{url}\n    },\n    enterpriseAltImage,\n    enterpriseText\n    }": ENTERPRISE_QUERYResult;
    "*[_type == \"b2b\"][0]{\n    _id,\n    b2bTitle,\n    b2bImage{\n    asset->{url}\n    },\n    b2bAltImage,\n    b2bText\n    }": B2B_QUERYResult;
    "*[_type == \"about\"][0]{\n    _id,\n    aboutTitle,\n    aboutImage{\n    asset->{url}\n    },\n    altAboutImage,\n    enterpriseText,\n    founderImage{\n    asset->{url}\n    },\n    altFounderImage,\n    founderText\n    }": ABOUT_QUERYResult;
    "*[_type == \"advantagesFS\"][0]{\n    _id,\n    advantagesTitle,\n    subTitle,\n    titleS1,\n    textS1,\n    iconS1{\n    asset->{url}\n    },\n    titleS2,\n    textS2,\n    iconS2{\n    asset->{url}\n    },\n    titleS3,\n    textS3,\n    iconS3{\n    asset->{url}\n    },\n    titleS4,\n    textS4,\n    iconS4{\n    asset->{url}\n    },\n    }": ADVANTAGES_FS_QUERYResult;
    "*[_type == \"projects\"][]{\n    _id,\n    projectsTitle,\n    projectsMainImage{\n    asset->{url}\n    },\n    altProjectsMainImage,\nimageGallery[] {\ngalleryImage{\n    asset->{url}\n    },\n    altGalleryImage,\n    },\n    projectsText\n    }": PROJECTS_QUERYResult;
    "*[_type == \"legal\"][0]{\n    _id,\n    name,\n    street,\n    city,\n    tel,\n    mail,\n    privacy\n    }": LEGAL_QUERYResult;
  }
}
